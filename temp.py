import numpy as np
from janome.tokenizer import Tokenizer


def texttiling_japanese(text, w=20, k=2):
    """
    text: 日本語の文章
    w: 窓の幅
    k: ブロックの数
    """
    # Janomeでトークン化
    t = Tokenizer()
    tokens = list(t.tokenize(text, wakati=True))

    # ブロックを作成
    blocks = [tokens[i : i + w] for i in range(0, len(tokens), w)]

    # スコアを計算
    scores = []
    for i in range(len(blocks) - 1):
        block1 = blocks[i]
        block2 = blocks[i + 1]
        score = 0
        for word in set(block1 + block2):
            count1 = block1.count(word)
            count2 = block2.count(word)
            score += abs(count1 - count2)
        scores.append(score)

    # 平均と標準偏差を計算
    mean = np.mean(scores)
    std_dev = np.std(scores)

    # 境界値を計算
    cutoffs = [mean - std_dev] * k

    # 境界値を探索
    boundaries = []
    depth_scores = []
    for i in range(len(scores) - k + 1):
        depth_score = sum([cutoffs[j] - scores[i + j] for j in range(k)])
        depth_scores.append(depth_score)
        if depth_score > 0:
            boundaries.append(i + int(k / 2))

    # 境界値に基づいて文章を分割
    segments = []
    start_index = 0
    for boundary in boundaries:
        end_index = boundary * w
        segment = "".join(tokens[start_index:end_index])
        segments.append(segment)
        start_index = end_index
    segment = "".join(tokens[start_index:])
    segments.append(segment)

    return segments


text = """次に、モデルタスクの考察について話したいと思います。
カナタ、モデルの評価結果をBPCと共有しますか? 
公式な話は来週から始まると思います。
私は、モデルチームの視点から、何が起こっているのかを話せると思います。
慎重な定義の最適化について私は、まだ着いたとは思いませんが、これはまったく変わらないと思いますか?
カラースキームの応用は来週にでもうまくいくでしょう?
先週のモデルメンテナンスで私と共有したと思いますが、受け入れテスト項目の作成はすでに完了していると思います。
次に、各プロパティの作業時間設定について話したいと思います。
実装はまだアイテムの作成プロセスにあると思いますので、まだあると思います。
これからもお二人で様々なことに取り組んでいきたいと思っておりますので、ありがとうございます。
これまでのタスク状況はと思いますが、出力結果の確認は氏によって行われました。
はい、バックログの内容に問題はないと思います。
日頃の計画の旗は、当初、テスト作業が行われた時にモデルに与えられました。
まずは各企業の勤務時間設定からテスト項目の内容を確認したいと思います。
残りの33件から36件は、最適な価値が得られない可能性があるケースをテストしており、32番目の項目は、各企業の就業時間が通常のシステムに反映されているかどうかを確認することです。
EMRETを導入するには、手動で開き、コントロールパネルのリーダーから見ることができます。
明日の予約予測のボードだと確信していますが、それは正しいと思います。
いいえ、そうではありません 申し訳ありません カラフルなコントロールビュー それはUMkItのサクセディングのようなものであるはずです。
まず、前提、試行錯誤のコード、仕様の前提、LClist.csvでは、実際のバージョンでは、作業時間が追加されます。
実際の環境のコーディング環境と試行とエラーのコーディングが異なるという認識ですか?
はい、理論に問題はないと思います。
今回は、この受け入れテストの場合、仕様に問題があるかどうか確認できたら良いと思います。
例えば、数値33の場合、バイトcの配信のタイムスパンよりも長い時間設定の例です。
多くの lc の 1 つが勤務時間よりも長い時間設定に設定されている場合は、その場合、LC は配信計画の順序で出ませんので、それを行う方法があると思います。
はい、指定するパラメータを指定しないと終了しますが、特定の LC リストに特定の稼働時間を置く関数を使用できると思います。
はい、一緒にログを確認する必要があると思います。
だから、モデル部分でそれを検証する方法かもしれないと思いました。
最初はconfigで設定すると想定していましたが、スタッフベースで値を適用できる場所であれば、そこからの読書の形になると思いますが、この項目は必要ないと思いました。
はい、この内容について確認したり心配したりしたい人は他にいますか? 
操作手順の詳細を更新した方が良いと思いますが、更新後にこの資料自体を共有する方が良いでしょうか? 
前回もお話ししましたが、解決策のイメージを共有できたと思います。
他のTOSAVASの試用版の開発項目が出たら、もう少し質問したいと思います。
現時点では、私が要求するBPと画像を共有する必要があり、突然それを要求した場合、私はスムーズに行かない部分がいくつかあると思います。
私は裁判が4月か5月に予定されていたことを覚えています。
そして、私たちはミスターとうまく行く方法を見つけることができるかどうか少し心配しています。
私たちが話していることの1つだと思います メーター効果の日の検証値を失うことです 複製の確認や前処理の結果の確認など たくさんあります アドホックなメーター効果と3つをサポートするデータを配置することで 奇妙なステップがあるかどうか調べることを考えていますメータ交換の日に非NCU値が存在しない場合、取り除くのは不要だと思っていましたが、このエリアでは3人しかできませんか?
TOSAGASUのLC番号に紐付けられた配信実績のようなものがあるのかなと思っていました。
Lemongasの場合、テストデータや納入実績などのタイムデータはありません。
異なる反応に分割する方がよいと思います。
一方、TOSAGASUはメーター交換の記録の日だけタイムデータを持たないという問題に対処できる可能性があると思います。
先週、TOSAGASUに絞り込むという議論があったと思いますので、前処理による結果確認からスタートすると思います。
現時点では大丈夫です。
まず、12月16日に、現在のモデルとモデルの精度をテストしました 12月16日、20日、22日。
これはまた、現在のモデルから学習したモデルの精度が高いという結果でもある。
結論として、テスト結果に基づいて、12月16日モデルに切り替えることをお勧めします。
結果に疑問や懸念点がある場合は、お気軽にコメントしてください。
彼に聞きたいのですが。
街灯のチケットがない場合は、新しいものを求め、この日のモデルへの切り替えを求めます。
現在、5枚の切符があり、そのうち4枚は受験対象と関連していますが、項目の詳細は、作業時間設定、メーター回転、積載時間に合わせた対策計画の出力についても決定しておりますので、今日は問題なかったとお答えしましたので、ご確認下さい。
まだお返ししておりませんが、今回一致する納品結果の入力のソースコードの診断結果をお送りください。
積載時間に合わせた配送計画のアウトプットについて質問があります。
今回は変更部と関係のないところだけだったので、いつも通り問題ないと思います。
関連場所はありましたが、各物件の作業時間設定に問題はありません。"""
segments = texttiling_japanese(text)
for i, segment in enumerate(segments):
    print(f"{i}：{segment}")
    print(f"\n")
